The user create the bounding box selecting it on the map ! --> MAX BOX !! Ne pas prendre toute la carte !!!
It goes then to the websockets
OU pas --> Voir si possible d'avoir toute la carte par défault

Pour la database intégrée :
- écran d'accueil expliquant le principe
- Start fetching --> Démarre le socket qui écrit dans un JSON
- Les nouvelles entrée pour un même vessel sont append --> On voit comme ça la trajectoire du vessel (anciennes positions grisée ?)
- Les callback sont trigger toutes les secondes et fetch le JSON
- Fonction de TTL (soit pour supprimer les data trop vieilles, soit pour ne garder que 2-3 position par vessel)
- Bouton pour reset le JSON --> Il doit êrte de toute façon reset pour chaque nouvelle connexion !

- Un autre websocket qui prend les info des vessels à partir des MMSI déjà fetched dans ais_position.json

- Les ship Static data ne sont envoyés que toutes les 3 à 6 minutes, la seule solution donc est d'espérer que la data pour une position arrive à un moment !
--> Informer l'utilisateur de cela et mettre not available yet quand pas dispo !

- Picto pour chaque type de bateau !

- Every five seconds --> Callback to build the final_df from the raw
- Faire la JOINTURE Seulement sur les raw NON Enrichies !!!

- Ideallement, il faudrait construire un job qui clean les raw au fur et à mesure

- Pour les icones sur la carte = Soit des fleches dans le sens de la direction, soit des icones selon le status de navigation ou le ship type

- Choix de la légende : Ship type ou status de navigation